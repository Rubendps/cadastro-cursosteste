import streamlit as st
import pandas as pd
import re
import io

st.set_page_config(page_title="Inscri√ß√£o de Cursos", page_icon="üìã")

cursos_disponiveis = [
    "Inform√°tica B√°sica",
    "Programa√ß√£o Python",
    "Excel Avan√ßado",
    "Design Gr√°fico",
    "Administra√ß√£o",
    "Marketing Digital",
    "Ingl√™s B√°sico",
    "Rob√≥tica Educacional"
]

# Inicializa o estado
if "inscricoes" not in st.session_state:
    st.session_state.inscricoes = {curso: [] for curso in cursos_disponiveis}

# Fun√ß√£o para validar CPF
def validar_cpf(cpf):
    cpf = re.sub(r'\D', '', cpf)
    if len(cpf) != 11 or cpf == cpf[0] * 11:
        return False
    for i in range(9, 11):
        soma = sum(int(cpf[j]) * ((i + 1) - j) for j in range(i))
        digito = ((soma * 10) % 11) % 10
        if digito != int(cpf[i]):
            return False
    return True

# Fun√ß√£o para validar telefone
def validar_telefone(telefone):
    return telefone.isdigit() and 8 <= len(telefone) <= 11

# Interface principal
st.title("üìã Formul√°rio de Inscri√ß√£o em Cursos")

curso_nome = st.selectbox("Escolha o curso desejado:", cursos_disponiveis)
cpf = st.text_input("CPF (somente n√∫meros):")
nome = st.text_input("Nome completo:")
telefone = st.text_input("Telefone (somente n√∫meros):")
turma = st.text_input("Turma:")
turno = st.selectbox("Turno:", ["Manh√£", "Tarde", "Noite"])

if st.button("Enviar Inscri√ß√£o"):
    cpf = re.sub(r'\D', '', cpf)
    telefone = re.sub(r'\D', '', telefone)

    inscritos = st.session_state.inscricoes[curso_nome]
    cpfs = [i["CPF"] for i in inscritos]

    if not validar_cpf(cpf):
        st.error("‚ùå CPF inv√°lido.")
    elif not validar_telefone(telefone):
        st.error("‚ùå Telefone inv√°lido. Use apenas n√∫meros.")
    elif not nome or not turma or not turno:
        st.warning("‚ö†Ô∏è Por favor, preencha todos os campos.")
    elif cpf in cpfs:
        st.warning("‚ö†Ô∏è Este CPF j√° est√° inscrito neste curso.")
    elif len(inscritos) >= 25:
        st.error("‚ùå Este curso j√° atingiu o limite de 25 inscritos.")
    else:
        st.session_state.inscricoes[curso_nome].append({
            "Nome": nome,
            "CPF": cpf,
            "Telefone": telefone,
            "Turma": turma,
            "Turno": turno
        })
        st.success("‚úÖ Inscri√ß√£o realizada com sucesso!")

# üîí √Årea secreta para ADM (voc√™)
st.divider()
senha = st.text_input("√Årea restrita - digite a senha para acessar as inscri√ß√µes:", type="password")

if senha == "admin123":  # Voc√™ pode trocar essa senha
    st.subheader("üì• Download das inscri√ß√µes por curso")

    for curso, inscritos in st.session_state.inscricoes.items():
        if inscritos:
            df = pd.DataFrame(inscritos)
            buffer = io.BytesIO()
            with pd.ExcelWriter(buffer, engine="openpyxl") as writer:
                df.to_excel(writer, index=False, sheet_name=curso[:31])  # Excel limita nome da aba a 31 chars
            buffer.seek(0)
            st.download_button(
                label=f"üì• Baixar {curso} ({len(inscritos)} inscritos)",
                data=buffer,
                file_name=f"{curso}.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
        else:
            st.text(f"{curso}: nenhum inscrito.")
